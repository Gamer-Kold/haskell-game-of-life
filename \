module Main where

import Raylib.Core
  ( beginDrawing,
    clearBackground,
    closeWindow,
    endDrawing,
    initWindow,
    setTargetFPS,
  )
import Raylib.Core.Shapes (drawRectangle)
import Raylib.Util (whileWindowOpen0)
import Raylib.Util.Colors (lightGray, rayWhite)

data CellState = Alive | Dead
type Point = (Int, Int)
type Cell = (Point, CellState) -- I hate this.
type Grid = [Cell]


main :: IO ()
main = do
  window <- initWindow 500 500 "Game Of Life"
  setTargetFPS 60

  whileWindowOpen0
    ( do
        beginDrawing

        clearBackground rayWhite
        -- drawText "Basic raylib window" 30 40 18 lightGray
        
        drawGridRecursively 0 0 50

        endDrawing
    )

  closeWindow window

drawGrid grid = sequence (map (\x -> drawRectangle (fst (fst x))*50 (snd (fst x))*50 50 50 lightGray) grid)

